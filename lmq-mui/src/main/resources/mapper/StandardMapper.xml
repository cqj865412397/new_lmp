<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lmq.dao.StandardMapper">
	<resultMap id="BaseResultMap" type="com.lmq.domain.Standard">
		<id column="Id" jdbcType="INTEGER" property="id" />
		<result column="Name" jdbcType="VARCHAR" property="name" />
		<result column="Tid" jdbcType="INTEGER" property="tid" />
		<result column="Gid" jdbcType="INTEGER" property="gid" />
		<result column="time" jdbcType="TIMESTAMP" property="time" />
		<result column="status" jdbcType="INTEGER" property="status" />
		<result column="async" jdbcType="INTEGER" property="async" />
		<result column="uid" jdbcType="VARCHAR" property="uid" />
		<result column="user1" jdbcType="VARCHAR" property="user1" />
		<result column="user2" jdbcType="VARCHAR" property="user2" />
		<result column="user3" jdbcType="VARCHAR" property="user3" />
		<result column="user4" jdbcType="VARCHAR" property="user4" />
		<result column="user5" jdbcType="VARCHAR" property="user5" />
	</resultMap>
	<sql id="Base_Column_List">
		Id, Name, Tid, Gid, time, status, async, uid, user1, user2, user3, user4,
		user5
	</sql>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from standard
		where Id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from standard
		where Id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.lmq.domain.Standard" useGeneratedKeys="true" keyProperty="id">
		insert into standard (Id, Name, Tid,
		Gid, time, status,
		async, uid, user1,
		user2, user3, user4,
		user5)
		values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{tid,jdbcType=INTEGER},
		#{gid,jdbcType=INTEGER}, NOW(), #{status,jdbcType=INTEGER},
		#{async,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR},
		#{user1,jdbcType=VARCHAR},
		#{user2,jdbcType=VARCHAR}, #{user3,jdbcType=VARCHAR}, #{user4,jdbcType=VARCHAR},
		#{user5,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective"
		parameterType="com.lmq.domain.Standard">
		insert into standard
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				Id,
			</if>
			<if test="name != null">
				Name,
			</if>
			<if test="tid != null">
				Tid,
			</if>
			<if test="gid != null">
				Gid,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="async != null">
				async,
			</if>
			<if test="uid != null">
				uid,
			</if>
			<if test="user1 != null">
				user1,
			</if>
			<if test="user2 != null">
				user2,
			</if>
			<if test="user3 != null">
				user3,
			</if>
			<if test="user4 != null">
				user4,
			</if>
			<if test="user5 != null">
				user5,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="tid != null">
				#{tid,jdbcType=INTEGER},
			</if>
			<if test="gid != null">
				#{gid,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				#{time,jdbcType=TIMESTAMP},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="async != null">
				#{async,jdbcType=INTEGER},
			</if>
			<if test="uid != null">
				#{uid,jdbcType=VARCHAR},
			</if>
			<if test="user1 != null">
				#{user1,jdbcType=VARCHAR},
			</if>
			<if test="user2 != null">
				#{user2,jdbcType=VARCHAR},
			</if>
			<if test="user3 != null">
				#{user3,jdbcType=VARCHAR},
			</if>
			<if test="user4 != null">
				#{user4,jdbcType=VARCHAR},
			</if>
			<if test="user5 != null">
				#{user5,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.lmq.domain.Standard">
		update standard
		<set>
			<if test="name != null">
				Name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="tid != null">
				Tid = #{tid,jdbcType=INTEGER},
			</if>
			<if test="gid != null">
				Gid = #{gid,jdbcType=INTEGER},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=TIMESTAMP},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="async != null">
				async = #{async,jdbcType=INTEGER},
			</if>
			<if test="uid != null">
				uid = #{uid,jdbcType=VARCHAR},
			</if>
			<if test="user1 != null">
				user1 = #{user1,jdbcType=VARCHAR},
			</if>
			<if test="user2 != null">
				user2 = #{user2,jdbcType=VARCHAR},
			</if>
			<if test="user3 != null">
				user3 = #{user3,jdbcType=VARCHAR},
			</if>
			<if test="user4 != null">
				user4 = #{user4,jdbcType=VARCHAR},
			</if>
			<if test="user5 != null">
				user5 = #{user5,jdbcType=VARCHAR},
			</if>
		</set>
		where Id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.lmq.domain.Standard">
		update standard
		set Name = #{name,jdbcType=VARCHAR},
		Tid = #{tid,jdbcType=INTEGER},
		Gid = #{gid,jdbcType=INTEGER},
		time = #{time,jdbcType=TIMESTAMP},
		status = #{status,jdbcType=INTEGER},
		async = #{async,jdbcType=INTEGER},
		uid = #{uid,jdbcType=VARCHAR},
		user1 = #{user1,jdbcType=VARCHAR},
		user2 = #{user2,jdbcType=VARCHAR},
		user3 = #{user3,jdbcType=VARCHAR},
		user4 = #{user4,jdbcType=VARCHAR},
		user5 = #{user5,jdbcType=VARCHAR}
		where Id = #{id,jdbcType=INTEGER}
	</update>



	<!-- 自定义 -->
	<select id="queryStandardsBytId"  resultMap="StandardAndInstance">
		SELECT * FROM `standard`
		WHERE `standard`.`status` = 0 
		AND `standard`.`Tid` in 
		<foreach collection="list" item="l" separator="," open="(" close=")">
			#{l.id}
		</foreach>
		AND `standard`.`Gid` = -1
	</select>
	<resultMap type="com.lmq.domain.Standard" id="StandardAndInstance" extends="BaseResultMap">
		<collection property="sInList" column="id"  ofType="com.lmq.domain.Standardinstance" select="com.lmq.dao.StandardinstanceMapper.querystandardInstanceBySid"></collection>
	</resultMap>
	<!-- 查询规格 -->
	<select id="queryStandardsBytIdAndGid"  resultMap="AllStandardAndInstance">
		SELECT *,#{gId} AS goodsId FROM `standard`#goodsId为商品查询的gId gId和goodsId有差别
		WHERE `standard`.`status` = 0
		AND `standard`.`Tid` in 
		<foreach collection="list" item="l" separator="," open="(" close=")">
			#{l.id}
		</foreach>
		AND `standard`.`Gid` in (-1,#{gId})
	</select>
	<resultMap type="com.lmq.domain.Standard" id="AllStandardAndInstance" extends="BaseResultMap">
		<collection property="sInList" column="{sId=id,gId=goodsId}"  ofType="com.lmq.domain.Standardinstance" select="com.lmq.dao.StandardinstanceMapper.queryAllStandardInstanceBySid"></collection>
	</resultMap>
	
	<!-- 删除自定义规格 -->
	<delete id="deleteByGid">
		DELETE FROM `standard`
		WHERE  `standard`.`status` = 0 AND`standard`.`Gid` =#{gId}
	</delete>
	
	<!-- 查询，添加分类时，查询所有类目下的属性 -->
    <select id="queryALLStandardByTid" resultMap="StandardAndInstance">
	    	SELECT `standard`.*
			FROM ( 
	    SELECT 
	        @r AS _id, 
	        (SELECT @r := `Parentid` FROM goodstype WHERE Id = _id) AS Parentid, 
	        @l := @l + 1 AS lvl 
	    FROM 
	        (SELECT @r := #{tId}, @l := 0) vars, 
	        goodstype h 
	    WHERE @r &lt;&gt; 0) T1 
	JOIN goodstype T2 
	ON T1._id = T2.Id 
	INNER JOIN `standard` ON `standard`.`Tid` = T2.`Id`
	WHERE standard.`status` = 0
	ORDER BY `standard`.`Id`
    </select>
    <!-- 批量改状态 -->
    <update id="updateStandardStatus">
    UPDATE `standard` SET `status` = 1
	WHERE `Id` IN
	( -100,
	<foreach collection="array" item="a" separator=",">
		#{a}
	</foreach>	
	)
    </update>
    
</mapper>