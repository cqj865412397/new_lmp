<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lmq.dao.report.ProfitMapper">
  <resultMap id="ProfitByCustomer" type="com.lmq.domain.report.Profit">
    <id column="cid" jdbcType="INTEGER" property="cid" />
    <result column="cname" jdbcType="VARCHAR" property="cname" />
    <result column="paymoney" jdbcType="INTEGER" property="paymoney" />
    <result column="money" jdbcType="INTEGER" property="money" />
    <result column="costmoney" jdbcType="INTEGER" property="costmoney" />
    <result column="profit" jdbcType="VARCHAR" property="profit" />
    <result column="profitability" jdbcType="VARCHAR" property="profitability" />
    <result column="time" jdbcType="VARCHAR" property="time" />
  </resultMap>
  <resultMap id="ProfitByGoods" type="com.lmq.domain.report.Profit">
	  <id column="goodsinstanceid" jdbcType="INTEGER" property="goodsinstanceid" />
	  <result column="gname" jdbcType="VARCHAR" property="gname" />
	  <result column="count" jdbcType="INTEGER" property="count" />
	  <result column="paymoney" jdbcType="INTEGER" property="paymoney" />
	  <result column="money" jdbcType="INTEGER" property="money" />
	  <result column="costmoney" jdbcType="INTEGER" property="costmoney" />
	  <result column="profit" jdbcType="VARCHAR" property="profit" />
	  <result column="profitability" jdbcType="VARCHAR" property="profitability" />
	  <result column="time" jdbcType="VARCHAR" property="time" />
	  <result column="standardName" property="standardName"/>
	  <result column="bname" property="bname"/>
	</resultMap>
	<resultMap id="ProfitDetaile" type="com.lmq.domain.report.Profit">
      <id column="cid" jdbcType="INTEGER" property="cid" />
      <result column="cname" jdbcType="VARCHAR" property="cname" />
	  <result column="goodsinstanceid" jdbcType="INTEGER" property="goodsinstanceid" />
	  <result column="gname" jdbcType="VARCHAR" property="gname" />
	  <result column="count" jdbcType="INTEGER" property="count" />
	  <result column="sid" jdbcType="INTEGER" property="sid" />
	  <result column="paymoney" jdbcType="INTEGER" property="paymoney" />
	  <result column="money" jdbcType="INTEGER" property="money" />
	  <result column="costmoney" jdbcType="INTEGER" property="costmoney" />
	  <result column="profit" jdbcType="VARCHAR" property="profit" />
	  <result column="profitability" jdbcType="VARCHAR" property="profitability" />
	  <result column="time" jdbcType="VARCHAR" property="time" />
	  <result column="standardName" property="standardName"/>
	  <result column="bname" property="bname"/>
	  
	</resultMap>
  <select id="queryByCustomer" resultMap="ProfitByCustomer">
  	SELECT c.`Id` AS cid,c.`Name` AS cname,SUM(s.`money`) AS money,SUM(s.`user5`) AS paymoney,SUM(stockdetail.`Price`*st.`count`) AS costmoney,s.time AS time FROM sales AS s
	INNER JOIN customer AS c ON s.`cid`=c.`Id`
	INNER JOIN Salesdetails AS sd ON s.`Id`=sd.`Salesid`
	INNER JOIN salesstockinfo AS st ON sd.`Id`=st.`stockdetailid`
	INNER JOIN stockdetail ON stockdetail.`Id`=st.`stockdetailid`
	WHERE s.`status`=0 AND s.`time` BETWEEN DATE(#{startdate}) AND DATE(#{enddate}) AND s.`Sid`=#{storeid}
	GROUP BY c.id;
  </select>
  <select id="queryByGoods" resultMap="ProfitByCustomer">
  	SELECT gi.`Id` AS goodsinstanceid,g.`name` AS gname,GROUP_CONCAT(DISTINCT standardinstance.`Name`)AS standardName,gi.`ids`,SUM(sd.`count`) AS `count`,`bit`.`Name` as bname, SUM(s.`money`) AS money,SUM(s.`user5`) AS paymoney,SUM(stockdetail.`Price`*st.`count`) AS costmoney FROM sales AS s
	INNER JOIN Salesdetails AS sd ON s.`Id`=sd.`Salesid`
	INNER JOIN salesstockinfo AS st ON sd.`Id`=st.`stockdetailid`
	INNER JOIN stockdetail ON stockdetail.`Id`=st.`stockdetailid`
	INNER JOIN goodsinstance AS gi ON sd.`user1`=gi.`Id`
	INNER JOIN goods AS g ON g.`Id`=gi.`Gid`
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , gi.`ids`)
	LEFT JOIN `bit` ON `bit`.`Id`=g.`Bid`
	WHERE s.`status`=0 AND s.`time` BETWEEN DATE(#{startdate}) AND DATE(#{enddate}) AND s.`Sid`=#{storeid}
	GROUP BY gi.`Id`;
  </select>
  <select id="queryDetailBycid" resultMap="ProfitDetaile">
	SELECT s.`Id` AS sid,c.`Id` AS cid,c.`Name` AS cname,gi.`Id` AS goodsinstanceid,g.`name` AS gname,t.standardName,gi.`ids`,sd.`count` AS `count`,`bit`.`Name` AS bname, s.`money` AS money,s.`user5` AS paymoney,(stockdetail.`Price`*st.`count`) AS costmoney,s.`time` FROM sales AS s
	INNER JOIN Salesdetails AS sd ON s.`Id`=sd.`Salesid`
	INNER JOIN salesstockinfo AS st ON sd.`Id`=st.`stockdetailid`
	INNER JOIN stockdetail ON stockdetail.`Id`=st.`stockdetailid`
	INNER JOIN goodsinstance AS gi ON sd.`user1`=gi.`Id`
	INNER JOIN goods AS g ON g.`Id`=gi.`Gid`
	INNER JOIN customer AS c ON s.`cid`=c.`Id`
	LEFT JOIN `bit` ON `bit`.`Id`=g.`Bid`
	LEFT JOIN (SELECT goodsinstance.Id,GROUP_CONCAT(standardinstance.`Name`)AS standardName FROM goodsinstance 
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	GROUP BY goodsinstance.`Id`) AS t ON t.Id=gi.`Id`
	WHERE s.`status`=0 AND s.`time` BETWEEN DATE(#{startdate}) AND DATE(#{enddate}) 
	AND s.`cid`=#{customer}
	ORDER BY s.`time`, s.`Id`;
  </select>
  <select id="queryDetailBygid" resultMap="ProfitDetaile">
	SELECT s.`Id` AS sid,c.`Id` AS cid,c.`Name` AS cname,gi.`Id` AS goodsinstanceid,g.`name` AS gname,t.standardName,gi.`ids`,sd.`count` AS `count`,`bit`.`Name` AS bname, s.`money` AS money,s.`user5` AS paymoney,(stockdetail.`Price`*st.`count`) AS costmoney,s.`time` FROM sales AS s
	INNER JOIN Salesdetails AS sd ON s.`Id`=sd.`Salesid`
	INNER JOIN salesstockinfo AS st ON sd.`Id`=st.`stockdetailid`
	INNER JOIN stockdetail ON stockdetail.`Id`=st.`stockdetailid`
	INNER JOIN goodsinstance AS gi ON sd.`user1`=gi.`Id`
	INNER JOIN goods AS g ON g.`Id`=gi.`Gid`
	INNER JOIN customer AS c ON s.`cid`=c.`Id`
	LEFT JOIN `bit` ON `bit`.`Id`=g.`Bid`
	LEFT JOIN (SELECT goodsinstance.Id,GROUP_CONCAT(standardinstance.`Name`)AS standardName FROM goodsinstance 
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	GROUP BY goodsinstance.`Id`) AS t ON t.Id=gi.`Id`
	WHERE s.`status`=0 AND s.`time` BETWEEN DATE(#{startdate}) AND DATE(#{enddate}) 
	AND gi.`Id`=#{goodsid}
	ORDER BY s.`time`, s.`Id`;
  </select>
</mapper>