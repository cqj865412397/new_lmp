<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lmq.dao.GoodsinstanceMapper">
  <resultMap id="BaseResultMap" type="com.lmq.domain.Goodsinstance">
    <id column="Id" jdbcType="INTEGER" property="id" />
    <result column="ids" jdbcType="VARCHAR" property="ids" />
    <result column="Gid" jdbcType="INTEGER" property="gid" />
    <result column="Ecode" jdbcType="VARCHAR" property="ecode" />
    <result column="Qcode" jdbcType="VARCHAR" property="qcode" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="async" jdbcType="INTEGER" property="async" />
    <result column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="DefaultState" jdbcType="INTEGER" property="defaultstate" />
    <result column="user1" jdbcType="VARCHAR" property="user1" />
    <result column="user2" jdbcType="VARCHAR" property="user2" />
    <result column="user3" jdbcType="VARCHAR" property="user3" />
    <result column="user4" jdbcType="VARCHAR" property="user4" />
    <result column="user5" jdbcType="VARCHAR" property="user5" />
  </resultMap>
  <sql id="Base_Column_List">
    Id, ids, Gid, Ecode, Qcode, time, status, async, uid, DefaultState, user1, user2, 
    user3, user4, user5
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goodsinstance
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goodsinstance
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lmq.domain.Goodsinstance" useGeneratedKeys="true" keyProperty="id">
    insert into goodsinstance (Id, ids, Gid, 
      Ecode, Qcode, time, 
      status, async, uid, 
      DefaultState, user1, user2, 
      user3, user4, user5
      )
    values (#{id,jdbcType=INTEGER}, #{ids,jdbcType=VARCHAR}, #{gid,jdbcType=INTEGER}, 
      #{ecode,jdbcType=VARCHAR}, #{qcode,jdbcType=VARCHAR}, NOW(), 
      #{status,jdbcType=INTEGER}, #{async,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR}, 
      #{defaultstate,jdbcType=INTEGER}, #{user1,jdbcType=VARCHAR}, #{user2,jdbcType=VARCHAR}, 
      #{user3,jdbcType=VARCHAR}, #{user4,jdbcType=VARCHAR}, #{user5,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lmq.domain.Goodsinstance">
    insert into goodsinstance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        Id,
      </if>
      <if test="ids != null">
        ids,
      </if>
      <if test="gid != null">
        Gid,
      </if>
      <if test="ecode != null">
        Ecode,
      </if>
      <if test="qcode != null">
        Qcode,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="async != null">
        async,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="defaultstate != null">
        DefaultState,
      </if>
      <if test="user1 != null">
        user1,
      </if>
      <if test="user2 != null">
        user2,
      </if>
      <if test="user3 != null">
        user3,
      </if>
      <if test="user4 != null">
        user4,
      </if>
      <if test="user5 != null">
        user5,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="ids != null">
        #{ids,jdbcType=VARCHAR},
      </if>
      <if test="gid != null">
        #{gid,jdbcType=INTEGER},
      </if>
      <if test="ecode != null">
        #{ecode,jdbcType=VARCHAR},
      </if>
      <if test="qcode != null">
        #{qcode,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="async != null">
        #{async,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="defaultstate != null">
        #{defaultstate,jdbcType=INTEGER},
      </if>
      <if test="user1 != null">
        #{user1,jdbcType=VARCHAR},
      </if>
      <if test="user2 != null">
        #{user2,jdbcType=VARCHAR},
      </if>
      <if test="user3 != null">
        #{user3,jdbcType=VARCHAR},
      </if>
      <if test="user4 != null">
        #{user4,jdbcType=VARCHAR},
      </if>
      <if test="user5 != null">
        #{user5,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lmq.domain.Goodsinstance">
    update goodsinstance
    <set>
      <if test="ids != null">
        ids = #{ids,jdbcType=VARCHAR},
      </if>
      <if test="gid != null">
        Gid = #{gid,jdbcType=INTEGER},
      </if>
      <if test="ecode != null">
        Ecode = #{ecode,jdbcType=VARCHAR},
      </if>
      <if test="qcode != null">
        Qcode = #{qcode,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="async != null">
        async = #{async,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="defaultstate != null">
        DefaultState = #{defaultstate,jdbcType=INTEGER},
      </if>
      <if test="user1 != null">
        user1 = #{user1,jdbcType=VARCHAR},
      </if>
      <if test="user2 != null">
        user2 = #{user2,jdbcType=VARCHAR},
      </if>
      <if test="user3 != null">
        user3 = #{user3,jdbcType=VARCHAR},
      </if>
      <if test="user4 != null">
        user4 = #{user4,jdbcType=VARCHAR},
      </if>
      <if test="user5 != null">
        user5 = #{user5,jdbcType=VARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lmq.domain.Goodsinstance">
    update goodsinstance
    set ids = #{ids,jdbcType=VARCHAR},
      Gid = #{gid,jdbcType=INTEGER},
      Ecode = #{ecode,jdbcType=VARCHAR},
      Qcode = #{qcode,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      async = #{async,jdbcType=INTEGER},
      uid = #{uid,jdbcType=VARCHAR},
      DefaultState = #{defaultstate,jdbcType=INTEGER},
      user1 = #{user1,jdbcType=VARCHAR},
      user2 = #{user2,jdbcType=VARCHAR},
      user3 = #{user3,jdbcType=VARCHAR},
      user4 = #{user4,jdbcType=VARCHAR},
      user5 = #{user5,jdbcType=VARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 自定义 -->
  <select id="queryGoodsinstanceInfoByGid" resultMap="GoodsInstanceInfo">
  	SELECT goodsinstance.Id,goodsinstance.ids,goodsinstance.`Qcode`,goodsinstance.`Ecode`,GROUP_CONCAT(standardinstance.`Name`)AS standardName 
	,goodsinstance.`Ecode`,goodsinstance.`Qcode`
	FROM goodsinstance 
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	WHERE goodsinstance.`status` = 0 AND standardinstance.`status` = 0
	AND goodsinstance.`Gid` = #{gId}
	GROUP BY goodsinstance.`Id`
	ORDER BY goodsinstance.`ids` ASC
  </select>
  <resultMap type="com.lmq.domain.Goodsinstance" id="GoodsInstanceInfo" extends="BaseResultMap">
		<result property="standardName" column="standardName"/>
		<association property="basePrice" column="id" select="com.lmq.dao.StockdetailMapper.queryInitPrice" ></association>
		<association property="totalCount" column="id" select="com.lmq.dao.StockdetailMapper.queryTotalCountByGoodsInstanceId"></association>
		<collection property="priceList" column="id" ofType="com.lmq.domain.Goodsinstanceprice" select="com.lmq.dao.GoodsinstancepriceMapper.queryPriceListByGid"></collection>
  </resultMap>
  <select id="queryOneGoodsInstanceByGid" resultType="com.lmq.domain.Goodsinstance">
  	SELECT * FROM `goodsinstance`
	WHERE `status` = 0 AND Gid = #{gId} AND DefaultState = 1
  </select>
  
  <delete id="deleteByGid">
  		DELETE FROM `goodsinstance` WHERE `Gid` = #{gId}	
  </delete>
  
  <!-- 打印查询 -->
	<select id="queryGoodsInstanceInfoByGid" resultType="com.lmq.domain.Goodsinstance">
		SELECT goodsinstance.Id,goodsinstance.ids,goodsinstance.`Qcode`,goodsinstance.`Ecode`,GROUP_CONCAT(standardinstance.`Name`)AS standardName,
		`pricetype`.`Name`AS defPriceName,`pricetype`.`Agio`,goodsinstanceprice.`price` AS defPrice,
		(goodsinstanceprice.`price`/`pricetype`.`Agio`*10)AS costPrice
		FROM goodsinstance 
		LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
		INNER JOIN `goodsinstanceprice` ON `goodsinstanceprice`.`goodsinstanceid` = goodsinstance.`Id`
		INNER JOIN `pricetype` ON `pricetype`.`Id` = `goodsinstanceprice`.`Ptype`
		WHERE goodsinstance.`status` = 0 AND(standardinstance.`status` = 0 OR ISNULL(standardinstance.`status`)) AND `goodsinstanceprice`.`status` = 0
		AND pricetype.`DefaultPrice` = 1 AND goodsinstance.`Gid` = #{gId}
		GROUP BY goodsinstance.`Id`#必须要
	</select>
  
  
  
  
  <select id="quertyGoodsInstanceIdsByGid" resultType="Integer">
  		SELECT goodsinstance.`Id` FROM `goodsinstance`
		WHERE `status` = 0 AND Gid = #{gId}
  </select>
  <!-- 查询单品价格   报价>客户类型价格>默认价格   -->
  <select id="queryGoodsInstanceVoList" resultType="com.lmq.domain.GoodsInstanceVo">
  	SELECT goodsinstance.Id AS goodsInstanceId,goodsinstance.ids,GROUP_CONCAT(standardinstance.`Name`)AS standardName
	,goodsinstanceprice.`price`,pricetype.`Name`AS priceName,q.`monye` AS money,`pricetype`.`DefaultPrice`,`goodsinstanceprice`.`Ptype`
	,goods.`name`AS goodsName,i.url,`bit`.`Name` AS bitName
	FROM goodsinstance
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	LEFT JOIN `goodsinstanceprice` ON `goodsinstanceprice`.`goodsinstanceid` = goodsinstance.`Id`
	INNER JOIN `pricetype` ON `pricetype`.`Id` = `goodsinstanceprice`.`Ptype`
	LEFT JOIN (
		SELECT * FROM `quote` WHERE `quote`.`status` = 0 AND `quote`.`cid` = #{cId}
	) AS q ON q.`gid` = goodsinstance.`Id`
	INNER JOIN `goods` ON `goods`.id = goodsinstance.`Gid`
	INNER JOIN `bit` ON `bit`.`Id` = `goods`.`Bid`
	INNER JOIN (SELECT * FROM `img` WHERE `img`.`status` = 0 GROUP BY `img`.`Id`)AS i ON i.Gid = goods.`Id`
	WHERE goodsinstance.`status` = 0 AND (standardinstance.`status` = 0 OR ISNULL(standardinstance.`status`)) AND goodsinstanceprice.`status` = 0
	AND pricetype.`status` = 0 AND goods.`status` = 0 AND `bit`.`status` = 0
	AND (standardinstance.`Name` LIKE CONCAT('%',#{gName},'%') OR goods.`name` LIKE CONCAT('%',#{gName},'%'))
	GROUP BY `goodsinstanceprice`.`Id`
	ORDER BY goods.`time`DESC#排序
  </select>
  <!-- 查询sid门店下全部单品默认价格 -->
  <select id="queryGoodsInstanceVoAboutDefPriceList" resultType="com.lmq.domain.GoodsInstanceVo">
	 SELECT goodsinstance.Id AS goodsInstanceId,goodsinstance.ids,GROUP_CONCAT(standardinstance.`Name`)AS standardName
	,goodsinstanceprice.`price`,pricetype.`Name`AS priceName,`pricetype`.`DefaultPrice`,`goodsinstanceprice`.`Ptype`
	,goods.`name`AS goodsName,`bit`.`Name` AS bitName,i.url
	FROM goodsinstance
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	LEFT JOIN `goodsinstanceprice` ON `goodsinstanceprice`.`goodsinstanceid` = goodsinstance.`Id`
	INNER JOIN `pricetype` ON `pricetype`.`Id` = `goodsinstanceprice`.`Ptype`
	INNER JOIN `goods` ON `goods`.id = goodsinstance.`Gid`
	INNER JOIN `bit` ON `bit`.`Id` = `goods`.`Bid`
	INNER JOIN (SELECT * FROM `img` WHERE `img`.`status` = 0 GROUP BY `img`.`Id`)AS i ON i.Gid = goods.`Id`
	WHERE goodsinstance.`status` = 0 AND (standardinstance.`status` = 0 OR ISNULL(standardinstance.`status`)) AND goodsinstanceprice.`status` = 0
	AND pricetype.`status` = 0 AND goods.`status` = 0 AND `bit`.`status` = 0
	AND `pricetype`.`DefaultPrice` = 1
	AND `goods`.`Sid` = #{sId}
	GROUP BY `goodsinstanceprice`.`Id`
	ORDER BY goods.`time`DESC#排序
  </select>
  <!-- 查询sid门店下单个单品默认价格 -->
  <select id="querySimGoodsInstanceVoAboutDefPrice" resultType="com.lmq.domain.GoodsInstanceVo">
  	SELECT goodsinstance.Id AS goodsInstanceId,goodsinstance.ids,GROUP_CONCAT(standardinstance.`Name`)AS standardName
	,goodsinstanceprice.`price`,pricetype.`Name`AS priceName,`pricetype`.`DefaultPrice`,`goodsinstanceprice`.`Ptype`
	,goods.`name`AS goodsName,`bit`.`Name` AS bitName,i.url
	FROM goodsinstance
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	LEFT JOIN `goodsinstanceprice` ON `goodsinstanceprice`.`goodsinstanceid` = goodsinstance.`Id`
	INNER JOIN `pricetype` ON `pricetype`.`Id` = `goodsinstanceprice`.`Ptype`
	INNER JOIN `goods` ON `goods`.id = goodsinstance.`Gid`
	INNER JOIN `bit` ON `bit`.`Id` = `goods`.`Bid`
	INNER JOIN (SELECT * FROM `img` WHERE `img`.`status` = 0 GROUP BY `img`.`Id`)AS i ON i.Gid = goods.`Id`
	WHERE goodsinstance.`status` = 0 AND (standardinstance.`status` = 0 OR ISNULL(standardinstance.`status`)) AND goodsinstanceprice.`status` = 0
	AND pricetype.`status` = 0 AND goods.`status` = 0 AND `bit`.`status` = 0
	AND `pricetype`.`DefaultPrice` = 1
	AND goodsinstance.`Id` = #{gInId}
	AND `goods`.`Sid` = #{sId}
	GROUP BY `goodsinstanceprice`.`Id`
  </select>
  <!-- 查询sid门店下单个单品报价 -->
  <select id="querySimGoodsInstanceVoAboutPrice" resultType="com.lmq.domain.GoodsInstanceVo">
  SELECT goodsinstance.Id AS goodsInstanceId,goodsinstance.ids,GROUP_CONCAT(standardinstance.`Name`)AS standardName
	,q.`monye` AS money,goods.`name`AS goodsName,`bit`.`Name` AS bitName,i.url
	FROM goodsinstance
	LEFT JOIN standardinstance ON FIND_IN_SET(standardinstance.`Id` , goodsinstance.`ids`)
	LEFT JOIN (
		SELECT * FROM `quote` WHERE `quote`.`status` = 0 AND `quote`.`cid` = #{cId}
	) AS q ON q.`gid` = goodsinstance.`Id`
	INNER JOIN `goods` ON `goods`.id = goodsinstance.`Gid`
	INNER JOIN `bit` ON `bit`.`Id` = `goods`.`Bid`
	INNER JOIN (SELECT * FROM `img` WHERE `img`.`status` = 0 GROUP BY `img`.`Id`)AS i ON i.Gid = goods.`Id`
	WHERE goodsinstance.`status` = 0 AND (standardinstance.`status` = 0 OR ISNULL(standardinstance.`status`)) 
	AND  goods.`status` = 0 AND `bit`.`status` = 0 AND goods.`status` = 0
	AND `goods`.`Sid` = #{sId}
	AND goodsinstance.`Id` = #{gInId}
  </select>
</mapper>